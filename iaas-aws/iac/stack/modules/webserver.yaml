Description: CloudFormation template for deploying the Webserver instance within the cct demo on iaas
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Key pair used to SSH into the instance
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet where the instance will be launched
  SecGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group for the instance
  SqlDbIPAddress:
    Type: String
    Description: IP address of the DB instance

# Outputs:
#   WebserverIpAddress:
#     Description: EIP address of the webserver instance created
#     Value: !GetAtt WebserverEIP.PublicIp

Resources:
  AllowHTTPPortSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DemoCCTWebserverSecGroup
      GroupDescription: Allow http connections to port 5000
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
  WebserverLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        # Debian 12
        ImageId: ami-0ef32de3e8ab0640e
        InstanceType: t2.medium
        KeyName: !Ref KeyPairName
        Monitoring:
          Enabled: true
        NetworkInterfaces:
          - AssociatePublicIpAddress: false
            DeviceIndex: 0
            SubnetId: !Ref SubnetId
            Groups:
              - !Ref SecGroupId
              - !Ref AllowHTTPPortSecGroup
        UserData: 
          Fn::Base64: !Sub |
            #cloud-config
            #
            # provisioning script of webserver for debian-based distro
            write_files:
            - content: |
                #!/bin/bash
                while true
                do
                  if ping -c 1 -W 2 "8.8.8.8" &>/dev/null; then
                    echo "$(date) - Internet is reachable."
                    break
                  else
                    echo "$(date) - Internet is unreachable."
                    sleep 3
                  fi
                done
                apt -y update
                apt -y upgrade
                apt -y install python3.11-venv default-libmysqlclient-dev \
                  python3.11-dev build-essential pkg-config

                mkdir -p webserver
                cd webserver
                python3.11 -m venv venv
                source venv/bin/activate

                wget "https://bootstrap.pypa.io/get-pip.py"
                python3.11 get-pip.py
                rm get-pip.py

                wget https://raw.githubusercontent.com/Sesar-Lab-Teaching/Cloud-Computing-Technologies/refs/heads/main/webserver/requirements.txt
                pip install -r requirements.txt

                wget https://raw.githubusercontent.com/Sesar-Lab-Teaching/Cloud-Computing-Technologies/refs/heads/main/webserver/main.py

                cat <<EOF > .env
                MYSQL_HOST=${SqlDbIPAddress}
                MYSQL_ROOT_PASSWORD=root
                MYSQL_USER=cct
                MYSQL_PASSWORD=cct-secret
                MYSQL_DATABASE=cct
                MYSQL_PORT=3306
                EOF

                flask --app main.py run --host=0.0.0.0 &
              path: /init.sh

            runcmd:
              - chmod +x /init.sh
              - /init.sh

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: demo-cct-webserver-instance
  # WebserverInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     LaunchTemplate:
  #       LaunchTemplateId: !Ref WebserverLaunchTemplate
  #       Version: !GetAtt WebserverLaunchTemplate.LatestVersionNumber
  # WebserverEIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     InstanceId: !Ref WebserverInstance
  ALBDumbSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      CidrBlock: 10.0.0.16/28
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: ""
  WebserverLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref SubnetId
        - !Ref ALBDumbSubnet
  ALBWebserverTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /health
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VpcId
  ALBWebserverListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBWebserverTargetGroup
          Type: forward
      LoadBalancerArn: !Ref WebserverLoadBalancer
      Port: 80
      Protocol: HTTP
  ASGWebserver:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WebserverLaunchTemplate
        Version: !GetAtt WebserverLaunchTemplate.LatestVersionNumber
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      MaxSize: '3'
      DesiredCapacity: '2'
      MinSize: '1'
      VPCZoneIdentifier: 
        - !Ref SubnetId
      TargetGroupARNs:
        - !Ref ALBWebserverTargetGroup